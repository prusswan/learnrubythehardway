Exercise 39: Hashes, Oh Lovely Hashes
*************************************

.. warning:: This is being rewritten based on the Python version, there may be errors.

Now I have to hurt you with another container you can use, because once
you learn this container a massive world of ultra-cool will be yours.  It is
the most useful container ever:  the hash.

Ruby calls them "hashes", other languages call them, "Dictionaries".  I tend to use
both names, but it doesn't matter.  What does matter is what they do when compared
to Arrays.  You see, a Array lets you do this:

.. code-block:: irb

    >> things = ['a','b','c','d']
    => ["a", "b", "c", "d"]
    >> puts things[1]
    b
    => nil
    >> things[1] = 'z'
    => "z"
    >> puts things[1]
    z
    => nil
    >> puts things.inspect
    ["a", "b", "c", "d"]
    => nil
    >>

You can use numbers to "index" into an Array, meaning you can use numbers to 
find out what's in Arrays.  You should know this about Arrays by now, but make sure you
understand that you can *only* use numbers to get items out of a Array.

What a ``Hash`` does is let you use *anything*, not just numbers.  Yes, a Hash
associates one thing to another, no matter what it is.  Take a look:


.. code-block:: irb

    >> stuff = {'name' => 'Zed', 'age' => 36, 'height' => 6*12+2}
    => {"name"=>"Zed", "height"=>74, "age"=>36}
    >> puts stuff['name']
    Zed
    => nil
    >> puts stuff['age']
    36
    => nil
    >> puts stuff['height']
    74
    => nil
    >> stuff['city'] = "San Francisco"
    => "San Francisco"
    >> puts stuff['city']
    San Francisco
    => nil
    >>

You will see that instead of just numbers we're using strings to say what we
want from the ``stuff`` Hash.  We can also put new things into the
Hash with strings.  It doesn't have to be strings though, we can also do
this:

.. code-block:: irb

    >> stuff[1] = "Wow"
    => "Wow"
    >> stuff[2] = "Neato"
    => "Neato"
    >> puts stuff[1]
    Wow
    => nil
    >> puts stuff[2]
    Neato
    => nil
    >> puts stuff.inspect()
    {1=>"Wow", "name"=>"Zed", 2=>"Neato", "city"=>"San Francisco",
         "height"=>74, "age"=>36}
    => nil
    >> 

In this code I used numbers, and then you can see there's numbers and strings as keys in the Hash when I print it.  I could use anything.  Well almost but just pretend
you can use anything for now.

Of course, a Hash that you can only put things in is pretty stupid, so here's 
how you delete things, with the ``delete`` function:

.. code-block:: irb
    
    >> stuff.delete('city')
    => "San Francisco"
    >> stuff.delete(1)
    => "Wow"
    >> stuff.delete(2)
    => "Neato"
    >> puts stuff.inspect
    {"name"=>"Zed", "height"=>74, "age"=>36}
    => nil
    >> 

We'll now do an exercise that you *must* study very carefully.  I want you to type this
exercise in and try to understand what's going on.  Take note of when I put things in
a Hash, get from them, and all the operations I use here.


.. literalinclude:: ex/ex39.rb
    :language: ruby
    :linenos:



What You Should See
===================

.. literalinclude:: ex/ex39.txt
    :language: console



Extra Credit
============

1. Do this same kind of mapping with cities and states/regions in your country, or
   or some other country.
2. Go find the Ruby documentation for Hashes (a.k.a. Hash) and try to do
   even more things to them.
3. Find out what you *can't* do with Hashes.  A big one is that they do not have order,
   so try playing with that.


