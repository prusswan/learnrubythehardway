Exercise 41: Learning To Speak Object Oriented
==============================================

.. warning:: This is being rewritten based on the Python version, there may be errors.

In this exercise I'm going to teach you how to speak "object oriented".  What
I'll do is give you a small set of words with definitions you need to know.
Then I'll give you a set of sentences with holes in them that you'll have to
understand.  Finally, I'm going to give you a large set of exercises that you
have to complete to make these sentences solid in your vocabulary.


Word Drills
-----------

* class : Tell Ruby to make a new kind of thing.
* object : Two meanings: the most basic kind of thing, and any instance of some thing.
* instance : What you get when you tell Ruby to create a class.
* def : How you define a function inside a class.
* @ : Inside the functions in a class, @ is an operator for variables in the instance/object being accessed.
* inheritance : The concept that one class can inherit traits from another class, much like you and your parents.
* composition : The concept that a class can be composed of other classes as parts, much like how a car has wheels.
* attribute : A property classes have that are from composition and are usually variables.
* is-a : A phrase to say that something inherits from another, as in a Salmon is-a Fish.
* has-a : A phrase to say that something is composed of other things or has a trait, as in a Salmon has-a mouth.

Alright, take some time to make flash cards for those and memorize them.  As
usual this won't make too much sense until after you're done with this
exercise, but you need to know the base words first.


Phrase Drills
-------------

Next I have a list of Ruby code snippets on the left, and the English
sentences for them:

1. class X(Y)            : "Make a class named X that is-a Y."
2. class X(object) def initialize(J) : "class X has-a initialize that takes J parameters."
3. class X(object) def M(J)        : "class X has-a function named M that takes J parameters."
4. foo = X()             : "Set foo to an instance of class X."
5. foo.M(J)              : "From foo get the M function, and call it with parameters J."
6. foo.K = Q             : "From foo get the K attribute and set it to Q."

In each of these where you see X, Y, M, J, K, Q, and foo you can treat those
like blank spots.  For example I can also write these sentences as:

1. "Make a class named ??? that is-a Y."
2. "class ??? has-a initialize that takes ??? parameters."
3. "class ??? has-a function named ??? that takes ??? parameters."
4. "Set foo to an instance of class ???."
5. "From foo get the ??? function, and call it with parameters ???."
6. "From foo get the ??? attribute and set it to ???."

Again, write these on some flash cards and drill them.  Put the Ruby code
snippet on the front and the sentence on the back.  You *have* to be able to
say the sentence exactly the same every time whenever you see that form.  Not
sort of the same, but exactly the same.


Combined Drills
---------------

The final preparation for you is to combine the words drills with the phrase
drills.  What I want you to do for this drill is this:

1. Take a phrase card and drill it.
2. Flip it over and read the sentence, and for each word in the sentence that is in your words drills, get that card.
3. Drill those words for that sentence.
4. Keep going until you are bored then take a break and do it again.


A Reading Test
--------------

I now have a little Ruby hack that will drill you on these words you know in
an infinite manner.  This is a simple script you should be able to figure out,
and the only thing it does is use a library called `urllib` to download a list
of words I have.  Here's the script, which you should enter into `oop_test.rb`
to work with it:


.. literalinclude:: ex/ex41.rb
    :language: ruby
    :linenos:

Here's an example of me running this and trying to answer the questions as
accurately as possible.  You can see that I type in the answer I think it is
based on the phrases I've given you, and then the script prints out the correct
answer.  You should get your answers as close as possible.

.. literalinclude:: ex/ex41.txt
    :linenos:


Practice English To Code
------------------------

Next you should run the script with the "english" option so that you drill the
inverse operation.  Given an English phrase, write the code for it.  Here's me
doing that too:

.. literalinclude:: ex/ex41a.txt
    :linenos:


Remember that these phrases are using nonsense words.  Part of learning to read
code well is to stop placing so much meaning on the names used for variables
and classes.  Too often people will read a word like "Cork" and suddenly get
derailed because that word will confuse them about the meaning.  In the above
example, "Cork" is just an arbitrary name chosen for a class.  Don't put any
other meaning into it, and instead treat it like the patterns I've given you.


Reading More Code
-----------------

You are now to go on a new quest to read even more code and this time, to
read the phrases you just learned in the code you read.  You will look for
all the files with classes, and then do the following:

1. For each class give its name and what other classes it inherits from.
2. Under that, list every function it has, and the parameters they take.
3. List all of the attributes it uses on self.
4. For each attribute, give the class it is.

The goal is to go through real code and start learning to "pattern match"
the phrases you just learned against how they're used.  If you drill this
enough you should start to see these patterns shout at you in the code
whereas before they just seemed like vague blank spots you didn't know.

