Exercise 38: Doing Things To Lists
**********************************

.. warning:: This is being rewritten based on the Python version, there may be errors.

You have learned about lists. When you learned about ``while-loops`` you
"appended" numbers to the end of a list and printed them out.   There was also
extra credit where you were supposed to find all the other things you can do to
lists in the Ruby documentation.  That was a while back, so go find in the
book where you did that and review if you do not know what I'm talking about.

Found it?  Remember it?  Good.  When you did this you had a list, and you "called" the
function ``push`` on it.  However, you may not really understand what's going on so let's see what
we can do to lists.

When you type Ruby code that reads ``mystuff.push('hello')`` you are actually
setting off a chain of events inside Ruby to cause something to happen to the
``mystuff`` list.  Here's how it works:

1. Ruby sees you mentioned ``mystuff`` and looks up that variable.  It might have to
   look backwards to see if you created with ``=``, look and see if it is a function
   argument, or maybe it's a global variable.  Either way it has to find the ``mystuff``
   first.
2. Once it finds ``mystuff`` it then hits the ``.`` (period) operator and starts to look
   at *variables* that are a part of ``mystuff``.  Since ``mystuff`` is a list, it knows
   that ``mystuff`` has a bunch of functions.
3. It then hits ``push`` and compares the name "push" to all the ones that ``mystuff``
   says it owns.  If push is in there (it is) then it grabs *that* to use.
4. Next Ruby sees the ``(`` (parenthesis) and realizes, "Oh hey, this should be a function."
   At this point it *calls* (aka runs, executes) the function just like normally, but instead it calls the function
   with an *extra* argument.
5. It then treats the ``push`` as a function, gets it from ``mystuff`` and calls it
   with your parameter.

That might be a lot to take in, but we're going to spend a few exercises getting this
concept firm in your brain.  To kick things off, here's an exercise that mixes
strings and lists for all kinds of fun.

.. literalinclude:: ex/ex38.rb
    :language: ruby
    :linenos:


What You Should See
===================

.. literalinclude:: ex/ex38.txt
    :language: console


Extra Credit
============

1. Take each function that is called, and go through the steps outlined above to translate them to what
   Ruby does.
2. Translate these function calls into English sentences. For example ``mystuff.push('hello')`` would be, "From mystuff get the push function and call it with 'hello'".
3. Go read about "Object Oriented Programming" online.  Confused?  I was too.  Do not worry.
   You will learn enough to be dangerous, and you can slowly learn more later.
4. Read up on what a "class" is in Ruby.  *Do not read about how other languages use the word "class".* That will only mess you up.
5. If you do not have any idea what I'm talking about do not worry.  Programmers like to feel smart
   so they invented Object Oriented Programming, named it OOP, and then used it way too much.  If you
   think that's hard, you should try to use "functional programming".

